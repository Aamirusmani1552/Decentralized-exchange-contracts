{
  "language": "Solidity",
  "sources": {
    "contracts/DEX.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./DEXValidTokens.sol\";\r\nimport \"./DEXTokenPrice.sol\";\r\nimport \"./WETH.sol\";\r\n\r\nerror DEX_notEnoughTokenProvided(address provider, uint256 amount);\r\nerror DEX_notEnoughAmountProvided(address provider, uint256 amount);\r\nerror DEX_notValidToken(address token);\r\nerror DEX_insufficientBalance(address owner, address token);\r\nerror DEX_tokenNotSupported(address token);\r\nerror DEX_invalidId();\r\nerror DEX_swapForTokensNotSupported(address from, address to);\r\nerror DEX_sameTokensProvidedForSwap(address from, address to);\r\nerror DEX_insufficientLiquidityInPool(int256 amount);\r\nerror DEX_anErrorOccured();\r\nerror DEX_WrongFunctionCall();\r\nerror DEX_poolNotActive();\r\nerror DEX_notPoolOwner(address owner);\r\nerror DEX_poolInTimeLock(uint256 minLockPeriod);\r\n\r\n/// @title A Decenteralized exchange for swapping tokens\r\n/// @author Aamir usmani. github username: Aamirusmani1552\r\n/// @notice This contract is just a for learning purpose. Please don't use it to deploy on mainnet. it might lead to loss of funds.\r\n/// @dev since solidity doesn't support fractional value, the contract formula's has been modified accordingly.\r\n\r\ncontract DEX is Ownable, DEXValidTokens, DEXTokenPrice, ReentrancyGuard {\r\n  using SafeMath for uint256;\r\n  using SafeMath for int128;\r\n  using Counters for Counters.Counter;\r\n  Counters.Counter private s_counter;\r\n\r\n  uint256 private constant RATE_0F_INTEREST_PER_ANNUM = 10;\r\n\r\n  struct pool {\r\n    address token;\r\n    uint256 amount;\r\n    uint256 timestamp;\r\n    uint256 minLockPeriod;\r\n    address owner;\r\n    bool active;\r\n  }\r\n\r\n  mapping(uint256 => pool) private s_liquidityPool;\r\n  mapping(address => uint256[]) private s_poolContributions;\r\n\r\n  event poolCreated(\r\n    uint256 indexed poolId,\r\n    address indexed token,\r\n    uint256 amount,\r\n    address owner,\r\n    uint256 indexed timeStamp,\r\n    uint256 minLockPeriod,\r\n    bool active\r\n  );\r\n\r\n  event EthToTokenSwapSuccessfull(\r\n    uint256 ethSwapped,\r\n    int256 tokenReceived,\r\n    int256 transactionFee,\r\n    address user\r\n  );\r\n\r\n  event TokenToEthSwapSuccessfull(\r\n    uint256 tokenSwapped,\r\n    int256 tokenReceived,\r\n    int256 transactionFee,\r\n    address user\r\n  );\r\n\r\n  event tokenSwappedSuccessfully(\r\n    uint256 tokenSwapped,\r\n    int256 tokenReceived,\r\n    int256 transactionFee,\r\n    address user\r\n  );\r\n\r\n  event LiquidityWithdrawSuccessfull(\r\n    uint256 poolId,\r\n    uint256 tokenToRecieve,\r\n    uint256 tokenToReceiveWithInterest,\r\n    uint256 totalInterestEarned,\r\n    address user,\r\n    address token\r\n  );\r\n\r\n  constructor(\r\n    address[] memory tokenAddresses,\r\n    address[] memory chainlinkAggregatorV3Addr,\r\n    address wethContract\r\n  )\r\n    DEXValidTokens(tokenAddresses, wethContract)\r\n    DEXTokenPrice(tokenAddresses, chainlinkAggregatorV3Addr)\r\n  {}\r\n\r\n  function provideLiquidityInEth() public payable nonReentrant {\r\n    if (msg.value <= 0 wei) {\r\n      revert DEX_notEnoughTokenProvided(msg.sender, msg.value);\r\n    }\r\n\r\n    pool memory newPool = pool(\r\n      i_wethContractAddress,\r\n      msg.value,\r\n      block.timestamp,\r\n      block.timestamp + uint256(1 weeks),\r\n      msg.sender,\r\n      true\r\n    );\r\n    s_liquidityPool[s_counter.current()] = newPool;\r\n    uint256 poolId = s_counter.current();\r\n    s_poolContributions[msg.sender].push(poolId);\r\n    s_counter.increment();\r\n\r\n    WETH wethContract = WETH(payable(i_wethContractAddress));\r\n    wethContract.deposit{ value: msg.value }();\r\n\r\n    emit poolCreated(\r\n      poolId,\r\n      i_wethContractAddress,\r\n      msg.value,\r\n      msg.sender,\r\n      block.timestamp,\r\n      (block.timestamp + uint256(1 weeks)),\r\n      true\r\n    );\r\n  }\r\n\r\n  function provideLiquidity(address token, uint256 amount) public nonReentrant {\r\n    if (token == address(0)) {\r\n      revert DEX_notValidToken(token);\r\n    }\r\n    if (amount <= 0) {\r\n      revert DEX_notEnoughTokenProvided(msg.sender, amount);\r\n    }\r\n    if (!_tokenPresent(token)) {\r\n      revert DEX_tokenNotSupported(token);\r\n    }\r\n\r\n    if (IERC20(token).balanceOf(msg.sender) < amount) {\r\n      revert DEX_insufficientBalance(msg.sender, token);\r\n    }\r\n\r\n    pool memory newPool = pool(\r\n      token,\r\n      amount,\r\n      block.timestamp,\r\n      block.timestamp + uint256(1 weeks),\r\n      msg.sender,\r\n      true\r\n    );\r\n    s_liquidityPool[s_counter.current()] = newPool;\r\n    uint256 poolId = s_counter.current();\r\n    s_poolContributions[msg.sender].push(poolId);\r\n    s_counter.increment();\r\n\r\n    IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n\r\n    emit poolCreated(\r\n      poolId,\r\n      token,\r\n      amount,\r\n      msg.sender,\r\n      block.timestamp,\r\n      (block.timestamp + uint256(1 weeks)),\r\n      true\r\n    );\r\n  }\r\n\r\n  function swap(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) public nonReentrant {\r\n    if (from == i_wethContractAddress || to == i_wethContractAddress) {\r\n      revert DEX_WrongFunctionCall();\r\n    }\r\n    if (from == to) {\r\n      revert DEX_sameTokensProvidedForSwap(from, to);\r\n    }\r\n\r\n    if (from == address(0) || to == address(0)) {\r\n      revert DEX_notValidToken(address(0));\r\n    }\r\n    if (amount <= 0) {\r\n      revert DEX_notEnoughAmountProvided(msg.sender, amount);\r\n    }\r\n    if (!_tokenPresent(from) || !_tokenPresent(to)) {\r\n      revert DEX_swapForTokensNotSupported(from, to);\r\n    }\r\n\r\n    if (IERC20(from).balanceOf(msg.sender) < amount) {\r\n      revert DEX_insufficientBalance(msg.sender, from);\r\n    }\r\n\r\n    int256 totalToToken = calculateExchangeToken(from, to, amount);\r\n    if (IERC20(to).balanceOf(address(this)) < uint256(totalToToken)) {\r\n      revert DEX_insufficientLiquidityInPool(totalToToken);\r\n    }\r\n\r\n    int256 fee = _calculateExchangeFee(totalToToken);\r\n    uint256 amountToSend = (uint256(totalToToken).sub(uint256(fee)));\r\n\r\n    IERC20(from).transferFrom(msg.sender, address(this), amount);\r\n    IERC20(to).transfer(msg.sender, amountToSend);\r\n\r\n    emit tokenSwappedSuccessfully(\r\n      (amount),\r\n      int256(amountToSend),\r\n      fee,\r\n      msg.sender\r\n    );\r\n  }\r\n\r\n  function swapWETHToToken(address from, address to)\r\n    public\r\n    payable\r\n    nonReentrant\r\n  {\r\n    if (from == address(0) || to == address(0)) {\r\n      revert DEX_notValidToken(address(0));\r\n    }\r\n\r\n    if (msg.value <= 0 wei) {\r\n      revert DEX_notEnoughAmountProvided(msg.sender, msg.value);\r\n    }\r\n\r\n    if (!_tokenPresent(to)) {\r\n      revert DEX_tokenNotSupported(to);\r\n    }\r\n\r\n    if (from != i_wethContractAddress) {\r\n      revert DEX_WrongFunctionCall();\r\n    }\r\n\r\n    int256 totalToToken = calculateExchangeToken(\r\n      i_wethContractAddress,\r\n      to,\r\n      msg.value\r\n    );\r\n\r\n    if (IERC20(to).balanceOf(address(this)) < uint256(totalToToken)) {\r\n      revert DEX_insufficientLiquidityInPool(int256(uint256(totalToToken)));\r\n    }\r\n\r\n    WETH wethContract = WETH(payable(i_wethContractAddress));\r\n    wethContract.deposit{ value: msg.value }();\r\n    int256 fee = _calculateExchangeFee(totalToToken);\r\n    IERC20(to).transfer(msg.sender, (uint256(totalToToken).sub(uint256(fee))));\r\n\r\n    emit EthToTokenSwapSuccessfull(\r\n      msg.value,\r\n      int256((uint256(totalToToken).sub(uint256(fee)))),\r\n      int256(uint256(fee)),\r\n      msg.sender\r\n    );\r\n  }\r\n\r\n  function swapTokenToWETH(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) public nonReentrant {\r\n    if (from == address(0) || to == address(0)) {\r\n      revert DEX_notValidToken(address(0));\r\n    } else if (amount <= 0) {\r\n      revert DEX_notEnoughAmountProvided(msg.sender, amount);\r\n    } else if (_tokenPresent(from) && to == i_wethContractAddress) {\r\n      int256 totalToToken = calculateExchangeToken(\r\n        from,\r\n        i_wethContractAddress,\r\n        amount\r\n      );\r\n\r\n      if (\r\n        IERC20(i_wethContractAddress).balanceOf(address(this)) <\r\n        uint256(totalToToken)\r\n      ) {\r\n        revert DEX_insufficientLiquidityInPool(int256(uint256(totalToToken)));\r\n      }\r\n\r\n      WETH wethContract = WETH(payable(i_wethContractAddress));\r\n      int256 fee = _calculateExchangeFee(totalToToken);\r\n      uint256 amountToSend = (uint256(totalToToken).sub(uint256(fee)));\r\n\r\n      IERC20(from).transferFrom(msg.sender, address(this), amount);\r\n\r\n      wethContract.withdraw(amountToSend);\r\n\r\n      (bool success, ) = payable(msg.sender).call{ value: amountToSend }(\"\");\r\n\r\n      if (!success) {\r\n        revert DEX_anErrorOccured();\r\n      }\r\n\r\n      emit TokenToEthSwapSuccessfull(\r\n        amount,\r\n        int256(amountToSend),\r\n        int256(fee),\r\n        msg.sender\r\n      );\r\n    }\r\n  }\r\n\r\n  function calculateExchangeToken(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) public view returns (int256) {\r\n    if (from == address(0) || to == address(0)) {\r\n      revert DEX_notValidToken(address(0));\r\n    }\r\n    if (amount <= 0) {\r\n      revert DEX_notEnoughAmountProvided(msg.sender, amount);\r\n    }\r\n    if (!_tokenPresent(from) || !_tokenPresent(to)) {\r\n      revert DEX_swapForTokensNotSupported(from, to);\r\n    }\r\n    AggregatorV3Interface fromChainlinkContract = AggregatorV3Interface(\r\n      s_tokenUsdPricesV3contracts[from]\r\n    );\r\n    AggregatorV3Interface toChainlinkContract = AggregatorV3Interface(\r\n      s_tokenUsdPricesV3contracts[to]\r\n    );\r\n\r\n    int256 fromPrice = _getPrice(fromChainlinkContract);\r\n    int256 toTokenPrice = _getPrice(toChainlinkContract);\r\n    int256 totalToToken = int256(\r\n      (uint256(fromPrice).mul(uint256(amount))).div(uint256(toTokenPrice))\r\n    );\r\n\r\n    return totalToToken;\r\n  }\r\n\r\n  function _calculateExchangeFee(int256 totalToToken)\r\n    internal\r\n    pure\r\n    returns (int256)\r\n  {\r\n    int256 fee = int256((uint256(totalToToken).mul(30)).div(10000));\r\n    return fee;\r\n  }\r\n\r\n  function calculateExchangeTokenAfterFee(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) public view returns (int256) {\r\n    if (from == address(0) || to == address(0)) {\r\n      revert DEX_notValidToken(address(0));\r\n    }\r\n    if (amount <= 0) {\r\n      revert DEX_notEnoughAmountProvided(msg.sender, amount);\r\n    }\r\n    if (!_tokenPresent(from) || !_tokenPresent(to)) {\r\n      revert DEX_swapForTokensNotSupported(from, to);\r\n    }\r\n    int256 totalToToken = calculateExchangeToken(from, to, amount);\r\n    int256 fee = _calculateExchangeFee(totalToToken);\r\n    return int256(uint256(totalToToken).sub(uint256(fee)));\r\n  }\r\n\r\n  function _tokenPresent(address token) internal view returns (bool) {\r\n    address[] memory tokenAddresses = s_validTokenAddresses;\r\n    for (uint8 i = 0; i < tokenAddresses.length; i++) {\r\n      if (token == tokenAddresses[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function removeLiquidity(uint256 poolId, address token)\r\n    external\r\n    nonReentrant\r\n  {\r\n    if (!_tokenPresent(token)) {\r\n      revert DEX_tokenNotSupported(token);\r\n    }\r\n\r\n    if (poolId >= s_counter.current()) {\r\n      revert DEX_invalidId();\r\n    }\r\n\r\n    pool storage _pool = s_liquidityPool[poolId];\r\n\r\n    if (_pool.active == false) {\r\n      revert DEX_poolNotActive();\r\n    }\r\n\r\n    if (_pool.owner != msg.sender) {\r\n      revert DEX_notPoolOwner(msg.sender);\r\n    }\r\n\r\n    if (_pool.minLockPeriod > block.timestamp) {\r\n      revert DEX_poolInTimeLock(_pool.minLockPeriod);\r\n    }\r\n\r\n    uint256 amount = _pool.amount;\r\n\r\n    int256 tokenToRecieve = calculateExchangeToken(_pool.token, token, amount);\r\n\r\n    if (IERC20(token).balanceOf(address(this)) < uint256(tokenToRecieve)) {\r\n      revert DEX_insufficientLiquidityInPool(int256(tokenToRecieve));\r\n    }\r\n\r\n    uint256 totalInterestEarned = _calculateInterest(\r\n      tokenToRecieve,\r\n      _pool.timestamp\r\n    );\r\n\r\n    uint256 tokenToReceiveWithInterest = uint256(tokenToRecieve).add(\r\n      totalInterestEarned\r\n    );\r\n\r\n    _pool.active = false;\r\n\r\n    if (token == i_wethContractAddress) {\r\n      WETH wethContract = WETH(payable(i_wethContractAddress));\r\n      wethContract.withdraw(tokenToReceiveWithInterest);\r\n      (bool success, ) = payable(msg.sender).call{\r\n        value: tokenToReceiveWithInterest\r\n      }(\"\");\r\n      if (!success) {\r\n        revert DEX_anErrorOccured();\r\n      }\r\n    } else {\r\n      IERC20(token).transfer(msg.sender, tokenToReceiveWithInterest);\r\n    }\r\n\r\n    emit LiquidityWithdrawSuccessfull(\r\n      poolId,\r\n      uint256(tokenToRecieve),\r\n      tokenToReceiveWithInterest,\r\n      totalInterestEarned,\r\n      msg.sender,\r\n      token\r\n    );\r\n  }\r\n\r\n  function _calculateInterest(int256 tokens, uint256 initialTimeStamp)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 secondsInYear = 31536000;\r\n    uint256 investPeriod = block.timestamp.sub(initialTimeStamp);\r\n    uint256 interestInOneYear = uint256(tokens).mul(RATE_0F_INTEREST_PER_ANNUM);\r\n    uint256 totalInterestEarned = investPeriod\r\n      .mul(interestInOneYear)\r\n      .div(secondsInYear)\r\n      .div(100);\r\n    return totalInterestEarned;\r\n  }\r\n\r\n  //getter functions\r\n  function checkPoolBalanceForToken(address token)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    if (token == address(0)) {\r\n      revert DEX_notValidToken(token);\r\n    }\r\n    if (!_tokenPresent(token)) {\r\n      revert DEX_tokenNotSupported(token);\r\n    }\r\n    return IERC20(token).balanceOf(address(this));\r\n  }\r\n\r\n  function supportedTokens() public view returns (address[] memory) {\r\n    return s_validTokenAddresses;\r\n  }\r\n\r\n  function checkPoolWithId(uint256 id) public view returns (pool memory) {\r\n    if (id >= s_counter.current()) {\r\n      revert DEX_invalidId();\r\n    }\r\n\r\n    return s_liquidityPool[id];\r\n  }\r\n\r\n  function checkContributionIds(address contributer)\r\n    public\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    return s_poolContributions[contributer];\r\n  }\r\n\r\n  // fallback and recieve functions\r\n  fallback() external payable {}\r\n\r\n  receive() external payable {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/DEXValidTokens.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract DEXValidTokens is Ownable {\r\n  address[] public s_validTokenAddresses;\r\n  address internal immutable i_wethContractAddress;\r\n\r\n  event TokenAddressesSet(address[], address);\r\n  event TokensAdded(address[], address);\r\n  event TokensRemvod(address[], address);\r\n\r\n  constructor(address[] memory tokenAddresses, address wethContract) {\r\n    for (uint8 i = 0; i < tokenAddresses.length; i++) {\r\n      s_validTokenAddresses.push(tokenAddresses[i]);\r\n    }\r\n    i_wethContractAddress = wethContract;\r\n    emit TokenAddressesSet(tokenAddresses, _msgSender());\r\n  }\r\n\r\n  function addTokens(address[] memory tokenAddresses) external onlyOwner {\r\n    for (uint8 i = 0; i < tokenAddresses.length; i++) {\r\n      s_validTokenAddresses.push(tokenAddresses[i]);\r\n    }\r\n    emit TokensAdded(tokenAddresses, _msgSender());\r\n  }\r\n\r\n  function renewAddresses(address[] memory tokenAddresses) external onlyOwner {\r\n    for (uint8 i = 0; i < tokenAddresses.length; i++) {\r\n      s_validTokenAddresses.push(tokenAddresses[i]);\r\n    }\r\n    emit TokenAddressesSet(tokenAddresses, _msgSender());\r\n  }\r\n}\r\n"
    },
    "contracts/DEXTokenPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nerror DEXTokenPrice_dataIsInconsistent();\r\n\r\ncontract DEXTokenPrice is Ownable {\r\n  mapping(address => address) internal s_tokenUsdPricesV3contracts;\r\n\r\n  event chainLinkPriceFeedAdded(\r\n    address[] tokenAddresses,\r\n    address[] contractAddresses,\r\n    address owner\r\n  );\r\n\r\n  constructor(\r\n    address[] memory validTokenAddr,\r\n    address[] memory chainlinkAggregatorV3Addr\r\n  ) {\r\n    for (uint8 i = 0; i < validTokenAddr.length; i++) {\r\n      s_tokenUsdPricesV3contracts[\r\n        validTokenAddr[i]\r\n      ] = chainlinkAggregatorV3Addr[i];\r\n    }\r\n  }\r\n\r\n  function addChainlinkPriceFeeds(\r\n    address[] memory tokenAddresses,\r\n    address[] memory contractAddresses\r\n  ) external onlyOwner {\r\n    if (\r\n      tokenAddresses.length > contractAddresses.length ||\r\n      tokenAddresses.length < contractAddresses.length\r\n    ) {\r\n      revert DEXTokenPrice_dataIsInconsistent();\r\n    }\r\n    for (uint8 i = 0; i < tokenAddresses.length; i++) {\r\n      s_tokenUsdPricesV3contracts[tokenAddresses[i]] = contractAddresses[i];\r\n    }\r\n    emit chainLinkPriceFeedAdded(\r\n      tokenAddresses,\r\n      contractAddresses,\r\n      _msgSender()\r\n    );\r\n  }\r\n\r\n  function getPriceFeedContract(address token) public view returns (address) {\r\n    return s_tokenUsdPricesV3contracts[token];\r\n  }\r\n\r\n  function _getPrice(AggregatorV3Interface tokenPriceFeed)\r\n    internal\r\n    view\r\n    returns (int256)\r\n  {\r\n    int256 price = _getLatestPrice(tokenPriceFeed);\r\n    return price;\r\n  }\r\n\r\n  function _getLatestPrice(AggregatorV3Interface tokenPriceFeed)\r\n    internal\r\n    view\r\n    returns (int256)\r\n  {\r\n    (\r\n      ,\r\n      /*uint80 roundID*/\r\n      int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\r\n      ,\r\n      ,\r\n\r\n    ) = tokenPriceFeed.latestRoundData();\r\n    return price;\r\n  }\r\n}\r\n"
    },
    "contracts/WETH.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nerror WETH_AnErrorOccured();\r\n\r\ncontract WETH is ERC20, ReentrancyGuard {\r\n  event Deposit(address, uint256);\r\n  event Withdraw(address, uint256);\r\n\r\n  constructor(uint256 initialSupply) ERC20(\"Wrapped Ether\", \"WETH\") {}\r\n\r\n  function deposit() public payable {\r\n    _mint(msg.sender, msg.value);\r\n    emit Deposit(msg.sender, msg.value);\r\n  }\r\n\r\n  function withdraw(uint256 amount) external nonReentrant {\r\n    _burn(msg.sender, amount);\r\n    (bool success, ) = payable(msg.sender).call{ value: amount }(\"\");\r\n\r\n    if (!success) {\r\n      revert WETH_AnErrorOccured();\r\n    }\r\n    emit Withdraw(msg.sender, amount);\r\n  }\r\n\r\n  function ethBalance() public view returns (uint256) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  fallback() external payable {\r\n    revert();\r\n  }\r\n\r\n  receive() external payable {\r\n    revert();\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}