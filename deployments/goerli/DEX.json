{
  "address": "0xD4FF40f24F57FA9A5EFA04d9C355d76a64232093",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "chainlinkAggregatorV3Addr",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "wethContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DEXTokenPrice_dataIsInconsistent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DEX_WrongFunctionCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DEX_anErrorOccured",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "DEX_insufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "DEX_insufficientLiquidityInPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DEX_invalidId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DEX_notEnoughAmountProvided",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DEX_notEnoughTokenProvided",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "DEX_notPoolOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "DEX_notValidToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLockPeriod",
          "type": "uint256"
        }
      ],
      "name": "DEX_poolInTimeLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DEX_poolNotActive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "DEX_sameTokensProvidedForSwap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "DEX_swapForTokensNotSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "DEX_tokenNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethSwapped",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tokenReceived",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "transactionFee",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "EthToTokenSwapSuccessfull",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenToRecieve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenToReceiveWithInterest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalInterestEarned",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "LiquidityWithdrawSuccessfull",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TokenAddressesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSwapped",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tokenReceived",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "transactionFee",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "TokenToEthSwapSuccessfull",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TokensAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TokensRemvod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "contractAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "chainLinkPriceFeedAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minLockPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "poolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSwapped",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tokenReceived",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "transactionFee",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "tokenSwappedSuccessfully",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "contractAddresses",
          "type": "address[]"
        }
      ],
      "name": "addChainlinkPriceFeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "addTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateExchangeToken",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateExchangeTokenAfterFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributer",
          "type": "address"
        }
      ],
      "name": "checkContributionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "checkPoolBalanceForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "checkPoolWithId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minLockPeriod",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct DEX.pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPriceFeedContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "provideLiquidityInEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "renewAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_validTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swapTokenToWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swapWETHToToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6324437615ffd0bb4a4358b4d7a486c6fe4f7f8f646a52a26a1f6b65d5f6a152",
  "receipt": {
    "to": null,
    "from": "0x6A00422C67579157C48A574E7064c2B856fc14f3",
    "contractAddress": "0xD4FF40f24F57FA9A5EFA04d9C355d76a64232093",
    "transactionIndex": 10,
    "gasUsed": "3838920",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000020000000000000000000010000000000000000000000000000010000080000000000100000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000040000000000000000000000000020000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x43b369b343fa5c1f04a7d32ff684d31b9febc763f2275e073f053d59dda51ae4",
    "transactionHash": "0x6324437615ffd0bb4a4358b4d7a486c6fe4f7f8f646a52a26a1f6b65d5f6a152",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 7582772,
        "transactionHash": "0x6324437615ffd0bb4a4358b4d7a486c6fe4f7f8f646a52a26a1f6b65d5f6a152",
        "address": "0xD4FF40f24F57FA9A5EFA04d9C355d76a64232093",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006a00422c67579157c48a574e7064c2b856fc14f3"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x43b369b343fa5c1f04a7d32ff684d31b9febc763f2275e073f053d59dda51ae4"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 7582772,
        "transactionHash": "0x6324437615ffd0bb4a4358b4d7a486c6fe4f7f8f646a52a26a1f6b65d5f6a152",
        "address": "0xD4FF40f24F57FA9A5EFA04d9C355d76a64232093",
        "topics": [
          "0x0f92e01580a0fc1a528e75e070f2ab1b2622d8f422c90e7f878e75530b34c952"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000006a00422c67579157c48a574e7064c2b856fc14f300000000000000000000000000000000000000000000000000000000000000020000000000000000000000004450c8e799d036de36e9ec096c2d14a33abc96f7000000000000000000000000326c977e6efc84e512bb9c30f76e30c160ed06fb",
        "logIndex": 31,
        "blockHash": "0x43b369b343fa5c1f04a7d32ff684d31b9febc763f2275e073f053d59dda51ae4"
      }
    ],
    "blockNumber": 7582772,
    "cumulativeGasUsed": "5387295",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x4450c8e799D036DE36e9eC096C2D14A33Abc96F7",
      "0x326C977E6efc84E512bB9C30f76E30c160eD06FB"
    ],
    [
      "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e",
      "0x48731cF7e84dc94C5f84577882c14Be11a5B7456"
    ],
    "0x4450c8e799D036DE36e9eC096C2D14A33Abc96F7"
  ],
  "numDeployments": 8,
  "solcInputHash": "5578a9afd405d4a30744ee78e50bc0f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"chainlinkAggregatorV3Addr\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"wethContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEXTokenPrice_dataIsInconsistent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DEX_WrongFunctionCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DEX_anErrorOccured\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DEX_insufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"DEX_insufficientLiquidityInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DEX_invalidId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DEX_notEnoughAmountProvided\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DEX_notEnoughTokenProvided\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DEX_notPoolOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DEX_notValidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLockPeriod\",\"type\":\"uint256\"}],\"name\":\"DEX_poolInTimeLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DEX_poolNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DEX_sameTokensProvidedForSwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DEX_swapForTokensNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DEX_tokenNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tokenReceived\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"transactionFee\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"EthToTokenSwapSuccessfull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenToRecieve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenToReceiveWithInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInterestEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LiquidityWithdrawSuccessfull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenAddressesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tokenReceived\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"transactionFee\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TokenToEthSwapSuccessfull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokensAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokensRemvod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"chainLinkPriceFeedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLockPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"poolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tokenReceived\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"transactionFee\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tokenSwappedSuccessfully\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"}],\"name\":\"addChainlinkPriceFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateExchangeToken\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateExchangeTokenAfterFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributer\",\"type\":\"address\"}],\"name\":\"checkContributionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkPoolBalanceForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"checkPoolWithId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct DEX.pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPriceFeedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provideLiquidityInEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"renewAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_validTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapTokenToWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapWETHToToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Aamir usmani. github username: Aamirusmani1552\",\"details\":\"since solidity doesn't support fractional value, the contract formula's has been modified accordingly.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A Decenteralized exchange for swapping tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is just a for learning purpose. Please don't use it to deploy on mainnet. it might lead to loss of funds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEX.sol\":\"DEX\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/DEX.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./DEXValidTokens.sol\\\";\\r\\nimport \\\"./DEXTokenPrice.sol\\\";\\r\\nimport \\\"./WETH.sol\\\";\\r\\n\\r\\nerror DEX_notEnoughTokenProvided(address provider, uint256 amount);\\r\\nerror DEX_notEnoughAmountProvided(address provider, uint256 amount);\\r\\nerror DEX_notValidToken(address token);\\r\\nerror DEX_insufficientBalance(address owner, address token);\\r\\nerror DEX_tokenNotSupported(address token);\\r\\nerror DEX_invalidId();\\r\\nerror DEX_swapForTokensNotSupported(address from, address to);\\r\\nerror DEX_sameTokensProvidedForSwap(address from, address to);\\r\\nerror DEX_insufficientLiquidityInPool(int256 amount);\\r\\nerror DEX_anErrorOccured();\\r\\nerror DEX_WrongFunctionCall();\\r\\nerror DEX_poolNotActive();\\r\\nerror DEX_notPoolOwner(address owner);\\r\\nerror DEX_poolInTimeLock(uint256 minLockPeriod);\\r\\n\\r\\n/// @title A Decenteralized exchange for swapping tokens\\r\\n/// @author Aamir usmani. github username: Aamirusmani1552\\r\\n/// @notice This contract is just a for learning purpose. Please don't use it to deploy on mainnet. it might lead to loss of funds.\\r\\n/// @dev since solidity doesn't support fractional value, the contract formula's has been modified accordingly.\\r\\n\\r\\ncontract DEX is Ownable, DEXValidTokens, DEXTokenPrice, ReentrancyGuard {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeMath for int128;\\r\\n  using Counters for Counters.Counter;\\r\\n  Counters.Counter private s_counter;\\r\\n\\r\\n  uint256 private constant RATE_0F_INTEREST_PER_ANNUM = 10;\\r\\n\\r\\n  struct pool {\\r\\n    address token;\\r\\n    uint256 amount;\\r\\n    uint256 timestamp;\\r\\n    uint256 minLockPeriod;\\r\\n    address owner;\\r\\n    bool active;\\r\\n  }\\r\\n\\r\\n  mapping(uint256 => pool) private s_liquidityPool;\\r\\n  mapping(address => uint256[]) private s_poolContributions;\\r\\n\\r\\n  event poolCreated(\\r\\n    uint256 indexed poolId,\\r\\n    address indexed token,\\r\\n    uint256 amount,\\r\\n    address owner,\\r\\n    uint256 indexed timeStamp,\\r\\n    uint256 minLockPeriod,\\r\\n    bool active\\r\\n  );\\r\\n\\r\\n  event EthToTokenSwapSuccessfull(\\r\\n    uint256 ethSwapped,\\r\\n    int256 tokenReceived,\\r\\n    int256 transactionFee,\\r\\n    address user\\r\\n  );\\r\\n\\r\\n  event TokenToEthSwapSuccessfull(\\r\\n    uint256 tokenSwapped,\\r\\n    int256 tokenReceived,\\r\\n    int256 transactionFee,\\r\\n    address user\\r\\n  );\\r\\n\\r\\n  event tokenSwappedSuccessfully(\\r\\n    uint256 tokenSwapped,\\r\\n    int256 tokenReceived,\\r\\n    int256 transactionFee,\\r\\n    address user\\r\\n  );\\r\\n\\r\\n  event LiquidityWithdrawSuccessfull(\\r\\n    uint256 poolId,\\r\\n    uint256 tokenToRecieve,\\r\\n    uint256 tokenToReceiveWithInterest,\\r\\n    uint256 totalInterestEarned,\\r\\n    address user,\\r\\n    address token\\r\\n  );\\r\\n\\r\\n  constructor(\\r\\n    address[] memory tokenAddresses,\\r\\n    address[] memory chainlinkAggregatorV3Addr,\\r\\n    address wethContract\\r\\n  )\\r\\n    DEXValidTokens(tokenAddresses, wethContract)\\r\\n    DEXTokenPrice(tokenAddresses, chainlinkAggregatorV3Addr)\\r\\n  {}\\r\\n\\r\\n  function provideLiquidityInEth() public payable nonReentrant {\\r\\n    if (msg.value <= 0 wei) {\\r\\n      revert DEX_notEnoughTokenProvided(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    pool memory newPool = pool(\\r\\n      i_wethContractAddress,\\r\\n      msg.value,\\r\\n      block.timestamp,\\r\\n      block.timestamp + uint256(1 weeks),\\r\\n      msg.sender,\\r\\n      true\\r\\n    );\\r\\n    s_liquidityPool[s_counter.current()] = newPool;\\r\\n    uint256 poolId = s_counter.current();\\r\\n    s_poolContributions[msg.sender].push(poolId);\\r\\n    s_counter.increment();\\r\\n\\r\\n    WETH wethContract = WETH(payable(i_wethContractAddress));\\r\\n    wethContract.deposit{ value: msg.value }();\\r\\n\\r\\n    emit poolCreated(\\r\\n      poolId,\\r\\n      i_wethContractAddress,\\r\\n      msg.value,\\r\\n      msg.sender,\\r\\n      block.timestamp,\\r\\n      (block.timestamp + uint256(1 weeks)),\\r\\n      true\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function provideLiquidity(address token, uint256 amount) public nonReentrant {\\r\\n    if (token == address(0)) {\\r\\n      revert DEX_notValidToken(token);\\r\\n    }\\r\\n    if (amount <= 0) {\\r\\n      revert DEX_notEnoughTokenProvided(msg.sender, amount);\\r\\n    }\\r\\n    if (!_tokenPresent(token)) {\\r\\n      revert DEX_tokenNotSupported(token);\\r\\n    }\\r\\n\\r\\n    if (IERC20(token).balanceOf(msg.sender) < amount) {\\r\\n      revert DEX_insufficientBalance(msg.sender, token);\\r\\n    }\\r\\n\\r\\n    pool memory newPool = pool(\\r\\n      token,\\r\\n      amount,\\r\\n      block.timestamp,\\r\\n      block.timestamp + uint256(1 weeks),\\r\\n      msg.sender,\\r\\n      true\\r\\n    );\\r\\n    s_liquidityPool[s_counter.current()] = newPool;\\r\\n    uint256 poolId = s_counter.current();\\r\\n    s_poolContributions[msg.sender].push(poolId);\\r\\n    s_counter.increment();\\r\\n\\r\\n    IERC20(token).transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n    emit poolCreated(\\r\\n      poolId,\\r\\n      token,\\r\\n      amount,\\r\\n      msg.sender,\\r\\n      block.timestamp,\\r\\n      (block.timestamp + uint256(1 weeks)),\\r\\n      true\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function swap(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) public nonReentrant {\\r\\n    if (from == i_wethContractAddress || to == i_wethContractAddress) {\\r\\n      revert DEX_WrongFunctionCall();\\r\\n    }\\r\\n    if (from == to) {\\r\\n      revert DEX_sameTokensProvidedForSwap(from, to);\\r\\n    }\\r\\n\\r\\n    if (from == address(0) || to == address(0)) {\\r\\n      revert DEX_notValidToken(address(0));\\r\\n    }\\r\\n    if (amount <= 0) {\\r\\n      revert DEX_notEnoughAmountProvided(msg.sender, amount);\\r\\n    }\\r\\n    if (!_tokenPresent(from) || !_tokenPresent(to)) {\\r\\n      revert DEX_swapForTokensNotSupported(from, to);\\r\\n    }\\r\\n\\r\\n    if (IERC20(from).balanceOf(msg.sender) < amount) {\\r\\n      revert DEX_insufficientBalance(msg.sender, from);\\r\\n    }\\r\\n\\r\\n    int256 totalToToken = calculateExchangeToken(from, to, amount);\\r\\n    if (IERC20(to).balanceOf(address(this)) < uint256(totalToToken)) {\\r\\n      revert DEX_insufficientLiquidityInPool(totalToToken);\\r\\n    }\\r\\n\\r\\n    int256 fee = _calculateExchangeFee(totalToToken);\\r\\n    uint256 amountToSend = (uint256(totalToToken).sub(uint256(fee)));\\r\\n\\r\\n    IERC20(from).transferFrom(msg.sender, address(this), amount);\\r\\n    IERC20(to).transfer(msg.sender, amountToSend);\\r\\n\\r\\n    emit tokenSwappedSuccessfully(\\r\\n      (amount),\\r\\n      int256(amountToSend),\\r\\n      fee,\\r\\n      msg.sender\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function swapWETHToToken(address from, address to)\\r\\n    public\\r\\n    payable\\r\\n    nonReentrant\\r\\n  {\\r\\n    if (from == address(0) || to == address(0)) {\\r\\n      revert DEX_notValidToken(address(0));\\r\\n    }\\r\\n\\r\\n    if (msg.value <= 0 wei) {\\r\\n      revert DEX_notEnoughAmountProvided(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    if (!_tokenPresent(to)) {\\r\\n      revert DEX_tokenNotSupported(to);\\r\\n    }\\r\\n\\r\\n    if (from != i_wethContractAddress) {\\r\\n      revert DEX_WrongFunctionCall();\\r\\n    }\\r\\n\\r\\n    int256 totalToToken = calculateExchangeToken(\\r\\n      i_wethContractAddress,\\r\\n      to,\\r\\n      msg.value\\r\\n    );\\r\\n\\r\\n    if (IERC20(to).balanceOf(address(this)) < uint256(totalToToken)) {\\r\\n      revert DEX_insufficientLiquidityInPool(int256(uint256(totalToToken)));\\r\\n    }\\r\\n\\r\\n    WETH wethContract = WETH(payable(i_wethContractAddress));\\r\\n    wethContract.deposit{ value: msg.value }();\\r\\n    int256 fee = _calculateExchangeFee(totalToToken);\\r\\n    IERC20(to).transfer(msg.sender, (uint256(totalToToken).sub(uint256(fee))));\\r\\n\\r\\n    emit EthToTokenSwapSuccessfull(\\r\\n      msg.value,\\r\\n      int256((uint256(totalToToken).sub(uint256(fee)))),\\r\\n      int256(uint256(fee)),\\r\\n      msg.sender\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function swapTokenToWETH(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) public nonReentrant {\\r\\n    if (from == address(0) || to == address(0)) {\\r\\n      revert DEX_notValidToken(address(0));\\r\\n    } else if (amount <= 0) {\\r\\n      revert DEX_notEnoughAmountProvided(msg.sender, amount);\\r\\n    } else if (_tokenPresent(from) && to == i_wethContractAddress) {\\r\\n      int256 totalToToken = calculateExchangeToken(\\r\\n        from,\\r\\n        i_wethContractAddress,\\r\\n        amount\\r\\n      );\\r\\n\\r\\n      if (\\r\\n        IERC20(i_wethContractAddress).balanceOf(address(this)) <\\r\\n        uint256(totalToToken)\\r\\n      ) {\\r\\n        revert DEX_insufficientLiquidityInPool(int256(uint256(totalToToken)));\\r\\n      }\\r\\n\\r\\n      WETH wethContract = WETH(payable(i_wethContractAddress));\\r\\n      int256 fee = _calculateExchangeFee(totalToToken);\\r\\n      uint256 amountToSend = (uint256(totalToToken).sub(uint256(fee)));\\r\\n\\r\\n      IERC20(from).transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n      wethContract.withdraw(amountToSend);\\r\\n\\r\\n      (bool success, ) = payable(msg.sender).call{ value: amountToSend }(\\\"\\\");\\r\\n\\r\\n      if (!success) {\\r\\n        revert DEX_anErrorOccured();\\r\\n      }\\r\\n\\r\\n      emit TokenToEthSwapSuccessfull(\\r\\n        amount,\\r\\n        int256(amountToSend),\\r\\n        int256(fee),\\r\\n        msg.sender\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function calculateExchangeToken(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) public view returns (int256) {\\r\\n    if (from == address(0) || to == address(0)) {\\r\\n      revert DEX_notValidToken(address(0));\\r\\n    }\\r\\n    if (amount <= 0) {\\r\\n      revert DEX_notEnoughAmountProvided(msg.sender, amount);\\r\\n    }\\r\\n    if (!_tokenPresent(from) || !_tokenPresent(to)) {\\r\\n      revert DEX_swapForTokensNotSupported(from, to);\\r\\n    }\\r\\n    AggregatorV3Interface fromChainlinkContract = AggregatorV3Interface(\\r\\n      s_tokenUsdPricesV3contracts[from]\\r\\n    );\\r\\n    AggregatorV3Interface toChainlinkContract = AggregatorV3Interface(\\r\\n      s_tokenUsdPricesV3contracts[to]\\r\\n    );\\r\\n\\r\\n    int256 fromPrice = _getPrice(fromChainlinkContract);\\r\\n    int256 toTokenPrice = _getPrice(toChainlinkContract);\\r\\n    int256 totalToToken = int256(\\r\\n      (uint256(fromPrice).mul(uint256(amount))).div(uint256(toTokenPrice))\\r\\n    );\\r\\n\\r\\n    return totalToToken;\\r\\n  }\\r\\n\\r\\n  function _calculateExchangeFee(int256 totalToToken)\\r\\n    internal\\r\\n    pure\\r\\n    returns (int256)\\r\\n  {\\r\\n    int256 fee = int256((uint256(totalToToken).mul(30)).div(10000));\\r\\n    return fee;\\r\\n  }\\r\\n\\r\\n  function calculateExchangeTokenAfterFee(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) public view returns (int256) {\\r\\n    if (from == address(0) || to == address(0)) {\\r\\n      revert DEX_notValidToken(address(0));\\r\\n    }\\r\\n    if (amount <= 0) {\\r\\n      revert DEX_notEnoughAmountProvided(msg.sender, amount);\\r\\n    }\\r\\n    if (!_tokenPresent(from) || !_tokenPresent(to)) {\\r\\n      revert DEX_swapForTokensNotSupported(from, to);\\r\\n    }\\r\\n    int256 totalToToken = calculateExchangeToken(from, to, amount);\\r\\n    int256 fee = _calculateExchangeFee(totalToToken);\\r\\n    return int256(uint256(totalToToken).sub(uint256(fee)));\\r\\n  }\\r\\n\\r\\n  function _tokenPresent(address token) internal view returns (bool) {\\r\\n    address[] memory tokenAddresses = s_validTokenAddresses;\\r\\n    for (uint8 i = 0; i < tokenAddresses.length; i++) {\\r\\n      if (token == tokenAddresses[i]) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  function removeLiquidity(uint256 poolId, address token)\\r\\n    external\\r\\n    nonReentrant\\r\\n  {\\r\\n    if (!_tokenPresent(token)) {\\r\\n      revert DEX_tokenNotSupported(token);\\r\\n    }\\r\\n\\r\\n    if (poolId >= s_counter.current()) {\\r\\n      revert DEX_invalidId();\\r\\n    }\\r\\n\\r\\n    pool storage _pool = s_liquidityPool[poolId];\\r\\n\\r\\n    if (_pool.active == false) {\\r\\n      revert DEX_poolNotActive();\\r\\n    }\\r\\n\\r\\n    if (_pool.owner != msg.sender) {\\r\\n      revert DEX_notPoolOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    if (_pool.minLockPeriod > block.timestamp) {\\r\\n      revert DEX_poolInTimeLock(_pool.minLockPeriod);\\r\\n    }\\r\\n\\r\\n    uint256 amount = _pool.amount;\\r\\n\\r\\n    int256 tokenToRecieve = calculateExchangeToken(_pool.token, token, amount);\\r\\n\\r\\n    if (IERC20(token).balanceOf(address(this)) < uint256(tokenToRecieve)) {\\r\\n      revert DEX_insufficientLiquidityInPool(int256(tokenToRecieve));\\r\\n    }\\r\\n\\r\\n    uint256 totalInterestEarned = _calculateInterest(\\r\\n      tokenToRecieve,\\r\\n      _pool.timestamp\\r\\n    );\\r\\n\\r\\n    uint256 tokenToReceiveWithInterest = uint256(tokenToRecieve).add(\\r\\n      totalInterestEarned\\r\\n    );\\r\\n\\r\\n    _pool.active = false;\\r\\n\\r\\n    if (token == i_wethContractAddress) {\\r\\n      WETH wethContract = WETH(payable(i_wethContractAddress));\\r\\n      wethContract.withdraw(tokenToReceiveWithInterest);\\r\\n      (bool success, ) = payable(msg.sender).call{\\r\\n        value: tokenToReceiveWithInterest\\r\\n      }(\\\"\\\");\\r\\n      if (!success) {\\r\\n        revert DEX_anErrorOccured();\\r\\n      }\\r\\n    } else {\\r\\n      IERC20(token).transfer(msg.sender, tokenToReceiveWithInterest);\\r\\n    }\\r\\n\\r\\n    emit LiquidityWithdrawSuccessfull(\\r\\n      poolId,\\r\\n      uint256(tokenToRecieve),\\r\\n      tokenToReceiveWithInterest,\\r\\n      totalInterestEarned,\\r\\n      msg.sender,\\r\\n      token\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _calculateInterest(int256 tokens, uint256 initialTimeStamp)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 secondsInYear = 31536000;\\r\\n    uint256 investPeriod = block.timestamp.sub(initialTimeStamp);\\r\\n    uint256 interestInOneYear = uint256(tokens).mul(RATE_0F_INTEREST_PER_ANNUM);\\r\\n    uint256 totalInterestEarned = investPeriod\\r\\n      .mul(interestInOneYear)\\r\\n      .div(secondsInYear)\\r\\n      .div(100);\\r\\n    return totalInterestEarned;\\r\\n  }\\r\\n\\r\\n  //getter functions\\r\\n  function checkPoolBalanceForToken(address token)\\r\\n    public\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    if (token == address(0)) {\\r\\n      revert DEX_notValidToken(token);\\r\\n    }\\r\\n    if (!_tokenPresent(token)) {\\r\\n      revert DEX_tokenNotSupported(token);\\r\\n    }\\r\\n    return IERC20(token).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  function supportedTokens() public view returns (address[] memory) {\\r\\n    return s_validTokenAddresses;\\r\\n  }\\r\\n\\r\\n  function checkPoolWithId(uint256 id) public view returns (pool memory) {\\r\\n    if (id >= s_counter.current()) {\\r\\n      revert DEX_invalidId();\\r\\n    }\\r\\n\\r\\n    return s_liquidityPool[id];\\r\\n  }\\r\\n\\r\\n  function checkContributionIds(address contributer)\\r\\n    public\\r\\n    view\\r\\n    returns (uint256[] memory)\\r\\n  {\\r\\n    return s_poolContributions[contributer];\\r\\n  }\\r\\n\\r\\n  // fallback and recieve functions\\r\\n  fallback() external payable {}\\r\\n\\r\\n  receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xe4034ef674821943df8385ff7a50674c02d283322ade9aa49264c51f14137eed\",\"license\":\"UNLICENSED\"},\"contracts/DEXTokenPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nerror DEXTokenPrice_dataIsInconsistent();\\r\\n\\r\\ncontract DEXTokenPrice is Ownable {\\r\\n  mapping(address => address) internal s_tokenUsdPricesV3contracts;\\r\\n\\r\\n  event chainLinkPriceFeedAdded(\\r\\n    address[] tokenAddresses,\\r\\n    address[] contractAddresses,\\r\\n    address owner\\r\\n  );\\r\\n\\r\\n  constructor(\\r\\n    address[] memory validTokenAddr,\\r\\n    address[] memory chainlinkAggregatorV3Addr\\r\\n  ) {\\r\\n    for (uint8 i = 0; i < validTokenAddr.length; i++) {\\r\\n      s_tokenUsdPricesV3contracts[\\r\\n        validTokenAddr[i]\\r\\n      ] = chainlinkAggregatorV3Addr[i];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addChainlinkPriceFeeds(\\r\\n    address[] memory tokenAddresses,\\r\\n    address[] memory contractAddresses\\r\\n  ) external onlyOwner {\\r\\n    if (\\r\\n      tokenAddresses.length > contractAddresses.length ||\\r\\n      tokenAddresses.length < contractAddresses.length\\r\\n    ) {\\r\\n      revert DEXTokenPrice_dataIsInconsistent();\\r\\n    }\\r\\n    for (uint8 i = 0; i < tokenAddresses.length; i++) {\\r\\n      s_tokenUsdPricesV3contracts[tokenAddresses[i]] = contractAddresses[i];\\r\\n    }\\r\\n    emit chainLinkPriceFeedAdded(\\r\\n      tokenAddresses,\\r\\n      contractAddresses,\\r\\n      _msgSender()\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function getPriceFeedContract(address token) public view returns (address) {\\r\\n    return s_tokenUsdPricesV3contracts[token];\\r\\n  }\\r\\n\\r\\n  function _getPrice(AggregatorV3Interface tokenPriceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (int256)\\r\\n  {\\r\\n    int256 price = _getLatestPrice(tokenPriceFeed);\\r\\n    return price;\\r\\n  }\\r\\n\\r\\n  function _getLatestPrice(AggregatorV3Interface tokenPriceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (int256)\\r\\n  {\\r\\n    (\\r\\n      ,\\r\\n      /*uint80 roundID*/\\r\\n      int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\\r\\n      ,\\r\\n      ,\\r\\n\\r\\n    ) = tokenPriceFeed.latestRoundData();\\r\\n    return price;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x5992ae1d44e1dbfb5959cf16aa3e099dfb9e4c5a85c1e12fec8f24c003e427b3\",\"license\":\"MIT\"},\"contracts/DEXValidTokens.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract DEXValidTokens is Ownable {\\r\\n  address[] public s_validTokenAddresses;\\r\\n  address internal immutable i_wethContractAddress;\\r\\n\\r\\n  event TokenAddressesSet(address[], address);\\r\\n  event TokensAdded(address[], address);\\r\\n  event TokensRemvod(address[], address);\\r\\n\\r\\n  constructor(address[] memory tokenAddresses, address wethContract) {\\r\\n    for (uint8 i = 0; i < tokenAddresses.length; i++) {\\r\\n      s_validTokenAddresses.push(tokenAddresses[i]);\\r\\n    }\\r\\n    i_wethContractAddress = wethContract;\\r\\n    emit TokenAddressesSet(tokenAddresses, _msgSender());\\r\\n  }\\r\\n\\r\\n  function addTokens(address[] memory tokenAddresses) external onlyOwner {\\r\\n    for (uint8 i = 0; i < tokenAddresses.length; i++) {\\r\\n      s_validTokenAddresses.push(tokenAddresses[i]);\\r\\n    }\\r\\n    emit TokensAdded(tokenAddresses, _msgSender());\\r\\n  }\\r\\n\\r\\n  function renewAddresses(address[] memory tokenAddresses) external onlyOwner {\\r\\n    for (uint8 i = 0; i < tokenAddresses.length; i++) {\\r\\n      s_validTokenAddresses.push(tokenAddresses[i]);\\r\\n    }\\r\\n    emit TokenAddressesSet(tokenAddresses, _msgSender());\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xdbb4e845e34611a54653124bcc7c65c6e92794bccb003a5e43d5be9207ae4ad8\",\"license\":\"UNLICENSED\"},\"contracts/WETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror WETH_AnErrorOccured();\\r\\n\\r\\ncontract WETH is ERC20, ReentrancyGuard {\\r\\n  event Deposit(address, uint256);\\r\\n  event Withdraw(address, uint256);\\r\\n\\r\\n  constructor(uint256 initialSupply) ERC20(\\\"Wrapped Ether\\\", \\\"WETH\\\") {}\\r\\n\\r\\n  function deposit() public payable {\\r\\n    _mint(msg.sender, msg.value);\\r\\n    emit Deposit(msg.sender, msg.value);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 amount) external nonReentrant {\\r\\n    _burn(msg.sender, amount);\\r\\n    (bool success, ) = payable(msg.sender).call{ value: amount }(\\\"\\\");\\r\\n\\r\\n    if (!success) {\\r\\n      revert WETH_AnErrorOccured();\\r\\n    }\\r\\n    emit Withdraw(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function ethBalance() public view returns (uint256) {\\r\\n    return address(this).balance;\\r\\n  }\\r\\n\\r\\n  fallback() external payable {\\r\\n    revert();\\r\\n  }\\r\\n\\r\\n  receive() external payable {\\r\\n    revert();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xd0cd765a8faf7ad5d3a6a9c72dfb8aca279eeade611c9cb9d523145338c3e5ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200494a3803806200494a833981810160405281019062000037919062000537565b828284836200005b6200004f6200027d60201b60201c565b6200028560201b60201c565b60005b82518160ff16101562000104576001838260ff1681518110620000865762000085620005d1565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080620000fb906200063c565b9150506200005e565b508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250507f0f92e01580a0fc1a528e75e070f2ab1b2622d8f422c90e7f878e75530b34c952826200016b6200027d60201b60201c565b6040516200017b92919062000749565b60405180910390a1505060005b82518160ff1610156200026957818160ff1681518110620001ae57620001ad620005d1565b5b602002602001015160026000858460ff1681518110620001d357620001d2620005d1565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808062000260906200063c565b91505062000188565b50505060016003819055505050506200077d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003ad8262000362565b810181811067ffffffffffffffff82111715620003cf57620003ce62000373565b5b80604052505050565b6000620003e462000349565b9050620003f28282620003a2565b919050565b600067ffffffffffffffff82111562000415576200041462000373565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000458826200042b565b9050919050565b6200046a816200044b565b81146200047657600080fd5b50565b6000815190506200048a816200045f565b92915050565b6000620004a7620004a184620003f7565b620003d8565b90508083825260208201905060208402830185811115620004cd57620004cc62000426565b5b835b81811015620004fa5780620004e5888262000479565b845260208401935050602081019050620004cf565b5050509392505050565b600082601f8301126200051c576200051b6200035d565b5b81516200052e84826020860162000490565b91505092915050565b60008060006060848603121562000553576200055262000353565b5b600084015167ffffffffffffffff81111562000574576200057362000358565b5b620005828682870162000504565b935050602084015167ffffffffffffffff811115620005a657620005a562000358565b5b620005b48682870162000504565b9250506040620005c78682870162000479565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600062000649826200062f565b915060ff82036200065f576200065e62000600565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620006a1816200044b565b82525050565b6000620006b5838362000696565b60208301905092915050565b6000602082019050919050565b6000620006db826200066a565b620006e7818562000675565b9350620006f48362000686565b8060005b838110156200072b5781516200070f8882620006a7565b97506200071c83620006c1565b925050600181019050620006f8565b5085935050505092915050565b62000743816200044b565b82525050565b60006040820190508181036000830152620007658185620006ce565b905062000776602083018462000738565b9392505050565b608051614156620007f4600039600081816108140152818161086901528181611746015281816117d0015281816118ba01528181611de701528181611e4201528181611e6c01528181611f4b015281816125210152818161270e015281816127930152818161287101526128c601526141566000f3fe6080604052600436106101235760003560e01c80638da5cb5b116100a0578063d1d9ff8511610064578063d1d9ff85146103f0578063d408036014610419578063de8d2c8e14610456578063df791e5014610460578063f2fde38b146104895761012a565b80638da5cb5b146102f7578063968c6313146103225780639a84a86f1461035f578063a8269acd14610388578063b002249d146103c55761012a565b806353dd6d0d116100e757806353dd6d0d146102215780635fea61201461025e578063681a1a16146102875780636b638d7f146102a3578063715018a6146102e05761012a565b806305fe138b1461012c5780630e89a3ce1461015557806327e28b891461017e5780633464f284146101bb5780634ae05c7d146101f85761012a565b3661012a57005b005b34801561013857600080fd5b50610153600480360381019061014e91906133c5565b6104b2565b005b34801561016157600080fd5b5061017c6004803603810190610177919061355e565b610a71565b005b34801561018a57600080fd5b506101a560048036038101906101a091906135d6565b610be2565b6040516101b29190613612565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd91906135d6565b610d1f565b6040516101ef919061363c565b60405180910390f35b34801561020457600080fd5b5061021f600480360381019061021a9190613657565b610d88565b005b34801561022d57600080fd5b50610248600480360381019061024391906136a0565b610e76565b604051610255919061370c565b60405180910390f35b34801561026a57600080fd5b5061028560048036038101906102809190613727565b6110e1565b005b6102a1600480360381019061029c9190613767565b6115bc565b005b3480156102af57600080fd5b506102ca60048036038101906102c591906135d6565b611a38565b6040516102d79190613865565b60405180910390f35b3480156102ec57600080fd5b506102f5611acf565b005b34801561030357600080fd5b5061030c611ae3565b604051610319919061363c565b60405180910390f35b34801561032e57600080fd5b50610349600480360381019061034491906136a0565b611b0c565b604051610356919061370c565b60405180910390f35b34801561036b57600080fd5b50610386600480360381019061038191906136a0565b611c97565b005b34801561039457600080fd5b506103af60048036038101906103aa9190613887565b61216f565b6040516103bc9190613959565b60405180910390f35b3480156103d157600080fd5b506103da6122c3565b6040516103e79190613a23565b60405180910390f35b3480156103fc57600080fd5b5061041760048036038101906104129190613657565b612351565b005b34801561042557600080fd5b50610440600480360381019061043b9190613887565b61243f565b60405161044d919061363c565b60405180910390f35b61045e61247e565b005b34801561046c57600080fd5b50610487600480360381019061048291906136a0565b612822565b005b34801561049557600080fd5b506104b060048036038101906104ab91906135d6565b612e0b565b005b6002600354036104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee90613aa2565b60405180910390fd5b600260038190555061050881612e8e565b61054957806040517f7797ffbe000000000000000000000000000000000000000000000000000000008152600401610540919061363c565b60405180910390fd5b6105536004612fa3565b821061058b576040517f04f490d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560008481526020019081526020016000209050600015158160040160149054906101000a900460ff161515036105f1576040517ffb2d2bb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461068557336040517f56b9e3ae00000000000000000000000000000000000000000000000000000000815260040161067c919061363c565b60405180910390fd5b42816003015411156106d25780600301546040517f98fb43820000000000000000000000000000000000000000000000000000000081526004016106c99190613612565b60405180910390fd5b600081600101549050600061070c8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168584610e76565b9050808473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610748919061363c565b602060405180830381865afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190613ad7565b10156107cc57806040517fb8c67e600000000000000000000000000000000000000000000000000000000081526004016107c3919061370c565b60405180910390fd5b60006107dc828560020154612fb1565b905060006107f3828461303390919063ffffffff16565b905060008560040160146101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361099f5760007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b81526004016108c39190613612565b600060405180830381600087803b1580156108dd57600080fd5b505af11580156108f1573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff168360405161091b90613b35565b60006040518083038185875af1925050503d8060008114610958576040519150601f19603f3d011682016040523d82523d6000602084013e61095d565b606091505b5050905080610998576040517fd7227dda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050610a1f565b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109da929190613b4a565b6020604051808303816000875af11580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190613b9f565b505b7f214bcf04e4c723a07e54c933e5e0cee347609545851dabc49534923ab040725287848385338b604051610a5896959493929190613bcc565b60405180910390a1505050505060016003819055505050565b610a79613049565b805182511180610a8a575080518251105b15610ac1576040517f089b91de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518160ff161015610b9b57818160ff1681518110610ae657610ae5613c2d565b5b602002602001015160026000858460ff1681518110610b0857610b07613c2d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610b9390613c98565b915050610ac4565b507fb6a3ef7cf10656c235edee3c98898ae8a752c47fc3d8e0c6da716bc6607824988282610bc76130c7565b604051610bd693929190613cc1565b60405180910390a15050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c5457816040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401610c4b919061363c565b60405180910390fd5b610c5d82612e8e565b610c9e57816040517f7797ffbe000000000000000000000000000000000000000000000000000000008152600401610c95919061363c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610cd7919061363c565b602060405180830381865afa158015610cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d189190613ad7565b9050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610d90613049565b60005b81518160ff161015610e32576001828260ff1681518110610db757610db6613c2d565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610e2a90613c98565b915050610d93565b507fd6fa28150464027527af46de4f6e4a0c63fdfb5579954631baa13ba43d08fcb681610e5d6130c7565b604051610e6b929190613d06565b60405180910390a150565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610ede5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15610f215760006040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401610f18919061363c565b60405180910390fd5b60008211610f685733826040517f188ea6a1000000000000000000000000000000000000000000000000000000008152600401610f5f929190613b4a565b60405180910390fd5b610f7184612e8e565b1580610f835750610f8183612e8e565b155b15610fc75783836040517fccb4b98a000000000000000000000000000000000000000000000000000000008152600401610fbe929190613d36565b60405180910390fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600061109a836130cf565b905060006110a7836130cf565b905060006110d0826110c289866130e690919063ffffffff16565b6130fc90919063ffffffff16565b905080955050505050509392505050565b600260035403611126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111d90613aa2565b60405180910390fd5b6002600381905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361119f57816040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401611196919061363c565b60405180910390fd5b600081116111e65733816040517f452913260000000000000000000000000000000000000000000000000000000081526004016111dd929190613b4a565b60405180910390fd5b6111ef82612e8e565b61123057816040517f7797ffbe000000000000000000000000000000000000000000000000000000008152600401611227919061363c565b60405180910390fd5b808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161126a919061363c565b602060405180830381865afa158015611287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ab9190613ad7565b10156112f05733826040517f2250391f0000000000000000000000000000000000000000000000000000000081526004016112e7929190613d36565b60405180910390fd5b60006040518060c001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200142815260200162093a80426113349190613d5f565b81526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600115158152509050806005600061136d6004612fa3565b815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555090505060006114566004612fa3565b9050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556114c86004613112565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161150593929190613d93565b6020604051808303816000875af1158015611524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115489190613b9f565b50428473ffffffffffffffffffffffffffffffffffffffff16827f36fada1fbbd5061ae87da160ee9cf9148d23771d156cdcd0d509004665580992863362093a80426115949190613d5f565b60016040516115a69493929190613dd9565b60405180910390a4505060016003819055505050565b600260035403611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f890613aa2565b60405180910390fd5b6002600381905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806116705750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b156116b35760006040517ff013c1c70000000000000000000000000000000000000000000000000000000081526004016116aa919061363c565b60405180910390fd5b600034116116fa5733346040517f188ea6a10000000000000000000000000000000000000000000000000000000081526004016116f1929190613b4a565b60405180910390fd5b61170381612e8e565b61174457806040517f7797ffbe00000000000000000000000000000000000000000000000000000000815260040161173b919061363c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146117c9576040517fd4f017e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006117f67f00000000000000000000000000000000000000000000000000000000000000008334610e76565b9050808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611832919061363c565b602060405180830381865afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118739190613ad7565b10156118b657806040517fb8c67e600000000000000000000000000000000000000000000000000000000081526004016118ad919061370c565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561192357600080fd5b505af1158015611937573d6000803e3d6000fd5b5050505050600061194783613128565b90508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33611979848761315e90919063ffffffff16565b6040518363ffffffff1660e01b8152600401611996929190613b4a565b6020604051808303816000875af11580156119b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d99190613b9f565b507f5ea8759b68627ec29b178c065e52f9aa44e80fa7a9826379f0b00d0c4737aeb134611a0f838661315e90919063ffffffff16565b8333604051611a219493929190613e1e565b60405180910390a150505060016003819055505050565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611ac357602002820191906000526020600020905b815481526020019060010190808311611aaf575b50505050509050919050565b611ad7613049565b611ae16000613174565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611b745750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15611bb75760006040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401611bae919061363c565b60405180910390fd5b60008211611bfe5733826040517f188ea6a1000000000000000000000000000000000000000000000000000000008152600401611bf5929190613b4a565b60405180910390fd5b611c0784612e8e565b1580611c195750611c1783612e8e565b155b15611c5d5783836040517fccb4b98a000000000000000000000000000000000000000000000000000000008152600401611c54929190613d36565b60405180910390fd5b6000611c6a858585610e76565b90506000611c7782613128565b9050611c8c818361315e90919063ffffffff16565b925050509392505050565b600260035403611cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd390613aa2565b60405180910390fd5b6002600381905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611d4b5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611d8e5760006040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401611d85919061363c565b60405180910390fd5b60008111611dd55733816040517f188ea6a1000000000000000000000000000000000000000000000000000000008152600401611dcc929190613b4a565b60405180910390fd5b611dde83612e8e565b8015611e3557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612162576000611e67847f000000000000000000000000000000000000000000000000000000000000000084610e76565b9050807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ec3919061363c565b602060405180830381865afa158015611ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f049190613ad7565b1015611f4757806040517fb8c67e60000000000000000000000000000000000000000000000000000000008152600401611f3e919061370c565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000090506000611f7783613128565b90506000611f8e828561315e90919063ffffffff16565b90508673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401611fcd93929190613d93565b6020604051808303816000875af1158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190613b9f565b508273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161204a9190613612565b600060405180830381600087803b15801561206457600080fd5b505af1158015612078573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff16826040516120a290613b35565b60006040518083038185875af1925050503d80600081146120df576040519150601f19603f3d011682016040523d82523d6000602084013e6120e4565b606091505b505090508061211f576040517fd7227dda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fc4ba93cc2a4369d092310672c450b170682626c0db2883bb58653fabf746781f868385336040516121549493929190613e1e565b60405180910390a150505050505b6001600381905550505050565b6121776132b9565b6121816004612fa3565b82106121b9576040517f04f490d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff1615151515815250509050919050565b6060600180548060200260200160405190810160405280929190818152602001828054801561234757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116122fd575b5050505050905090565b612359613049565b60005b81518160ff1610156123fb576001828260ff16815181106123805761237f613c2d565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806123f390613c98565b91505061235c565b507f0f92e01580a0fc1a528e75e070f2ab1b2622d8f422c90e7f878e75530b34c952816124266130c7565b604051612434929190613d06565b60405180910390a150565b6001818154811061244f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600354036124c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ba90613aa2565b60405180910390fd5b6002600381905550600034116125125733346040517f45291326000000000000000000000000000000000000000000000000000000008152600401612509929190613b4a565b60405180910390fd5b60006040518060c001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815260200134815260200142815260200162093a80426125769190613d5f565b81526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160011515815250905080600560006125af6004612fa3565b815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555090505060006126986004612fa3565b9050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505561270a6004613112565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561277757600080fd5b505af115801561278b573d6000803e3d6000fd5b5050505050427f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16837f36fada1fbbd5061ae87da160ee9cf9148d23771d156cdcd0d509004665580992343362093a80426127fb9190613d5f565b600160405161280d9493929190613dd9565b60405180910390a45050506001600381905550565b600260035403612867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285e90613aa2565b60405180910390fd5b60026003819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061291457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561294b576040517fd4f017e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036129bd5782826040517f048fdf110000000000000000000000000000000000000000000000000000000081526004016129b4929190613d36565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612a245750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612a675760006040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401612a5e919061363c565b60405180910390fd5b60008111612aae5733816040517f188ea6a1000000000000000000000000000000000000000000000000000000008152600401612aa5929190613b4a565b60405180910390fd5b612ab783612e8e565b1580612ac95750612ac782612e8e565b155b15612b0d5782826040517fccb4b98a000000000000000000000000000000000000000000000000000000008152600401612b04929190613d36565b60405180910390fd5b808373ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401612b47919061363c565b602060405180830381865afa158015612b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b889190613ad7565b1015612bcd5733836040517f2250391f000000000000000000000000000000000000000000000000000000008152600401612bc4929190613d36565b60405180910390fd5b6000612bda848484610e76565b9050808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612c16919061363c565b602060405180830381865afa158015612c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c579190613ad7565b1015612c9a57806040517fb8c67e60000000000000000000000000000000000000000000000000000000008152600401612c91919061370c565b60405180910390fd5b6000612ca582613128565b90506000612cbc828461315e90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401612cfb93929190613d93565b6020604051808303816000875af1158015612d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3e9190613b9f565b508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612d7a929190613b4a565b6020604051808303816000875af1158015612d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbd9190613b9f565b507f18764c8d0c0e69b6413adcc413385be0c1b905839a173088010b8fb399ff809084828433604051612df39493929190613e1e565b60405180910390a15050506001600381905550505050565b612e13613049565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7990613ed5565b60405180910390fd5b612e8b81613174565b50565b6000806001805480602002602001604051908101604052809291908181526020018280548015612f1357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612ec9575b5050505050905060005b81518160ff161015612f9757818160ff1681518110612f3f57612f3e613c2d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612f8457600192505050612f9e565b8080612f8f90613c98565b915050612f1d565b5060009150505b919050565b600081600001549050919050565b6000806301e1338090506000612fd0844261315e90919063ffffffff16565b90506000612fe8600a876130e690919063ffffffff16565b9050600061302460646130168661300886886130e690919063ffffffff16565b6130fc90919063ffffffff16565b6130fc90919063ffffffff16565b90508094505050505092915050565b600081836130419190613d5f565b905092915050565b6130516130c7565b73ffffffffffffffffffffffffffffffffffffffff1661306f611ae3565b73ffffffffffffffffffffffffffffffffffffffff16146130c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130bc90613f41565b60405180910390fd5b565b600033905090565b6000806130db83613238565b905080915050919050565b600081836130f49190613f61565b905092915050565b6000818361310a9190613fd2565b905092915050565b6001816000016000828254019250508190555050565b600080613153612710613145601e866130e690919063ffffffff16565b6130fc90919063ffffffff16565b905080915050919050565b6000818361316c9190614003565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015613286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132aa91906140a5565b50505091505080915050919050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61334481613331565b811461334f57600080fd5b50565b6000813590506133618161333b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061339282613367565b9050919050565b6133a281613387565b81146133ad57600080fd5b50565b6000813590506133bf81613399565b92915050565b600080604083850312156133dc576133db613327565b5b60006133ea85828601613352565b92505060206133fb858286016133b0565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134538261340a565b810181811067ffffffffffffffff821117156134725761347161341b565b5b80604052505050565b600061348561331d565b9050613491828261344a565b919050565b600067ffffffffffffffff8211156134b1576134b061341b565b5b602082029050602081019050919050565b600080fd5b60006134da6134d584613496565b61347b565b905080838252602082019050602084028301858111156134fd576134fc6134c2565b5b835b81811015613526578061351288826133b0565b8452602084019350506020810190506134ff565b5050509392505050565b600082601f83011261354557613544613405565b5b81356135558482602086016134c7565b91505092915050565b6000806040838503121561357557613574613327565b5b600083013567ffffffffffffffff8111156135935761359261332c565b5b61359f85828601613530565b925050602083013567ffffffffffffffff8111156135c0576135bf61332c565b5b6135cc85828601613530565b9150509250929050565b6000602082840312156135ec576135eb613327565b5b60006135fa848285016133b0565b91505092915050565b61360c81613331565b82525050565b60006020820190506136276000830184613603565b92915050565b61363681613387565b82525050565b6000602082019050613651600083018461362d565b92915050565b60006020828403121561366d5761366c613327565b5b600082013567ffffffffffffffff81111561368b5761368a61332c565b5b61369784828501613530565b91505092915050565b6000806000606084860312156136b9576136b8613327565b5b60006136c7868287016133b0565b93505060206136d8868287016133b0565b92505060406136e986828701613352565b9150509250925092565b6000819050919050565b613706816136f3565b82525050565b600060208201905061372160008301846136fd565b92915050565b6000806040838503121561373e5761373d613327565b5b600061374c858286016133b0565b925050602061375d85828601613352565b9150509250929050565b6000806040838503121561377e5761377d613327565b5b600061378c858286016133b0565b925050602061379d858286016133b0565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6137dc81613331565b82525050565b60006137ee83836137d3565b60208301905092915050565b6000602082019050919050565b6000613812826137a7565b61381c81856137b2565b9350613827836137c3565b8060005b8381101561385857815161383f88826137e2565b975061384a836137fa565b92505060018101905061382b565b5085935050505092915050565b6000602082019050818103600083015261387f8184613807565b905092915050565b60006020828403121561389d5761389c613327565b5b60006138ab84828501613352565b91505092915050565b6138bd81613387565b82525050565b60008115159050919050565b6138d8816138c3565b82525050565b60c0820160008201516138f460008501826138b4565b50602082015161390760208501826137d3565b50604082015161391a60408501826137d3565b50606082015161392d60608501826137d3565b50608082015161394060808501826138b4565b5060a082015161395360a08501826138cf565b50505050565b600060c08201905061396e60008301846138de565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006139ac83836138b4565b60208301905092915050565b6000602082019050919050565b60006139d082613974565b6139da818561397f565b93506139e583613990565b8060005b83811015613a165781516139fd88826139a0565b9750613a08836139b8565b9250506001810190506139e9565b5085935050505092915050565b60006020820190508181036000830152613a3d81846139c5565b905092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613a8c601f83613a45565b9150613a9782613a56565b602082019050919050565b60006020820190508181036000830152613abb81613a7f565b9050919050565b600081519050613ad18161333b565b92915050565b600060208284031215613aed57613aec613327565b5b6000613afb84828501613ac2565b91505092915050565b600081905092915050565b50565b6000613b1f600083613b04565b9150613b2a82613b0f565b600082019050919050565b6000613b4082613b12565b9150819050919050565b6000604082019050613b5f600083018561362d565b613b6c6020830184613603565b9392505050565b613b7c816138c3565b8114613b8757600080fd5b50565b600081519050613b9981613b73565b92915050565b600060208284031215613bb557613bb4613327565b5b6000613bc384828501613b8a565b91505092915050565b600060c082019050613be16000830189613603565b613bee6020830188613603565b613bfb6040830187613603565b613c086060830186613603565b613c15608083018561362d565b613c2260a083018461362d565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b6000613ca382613c8b565b915060ff8203613cb657613cb5613c5c565b5b600182019050919050565b60006060820190508181036000830152613cdb81866139c5565b90508181036020830152613cef81856139c5565b9050613cfe604083018461362d565b949350505050565b60006040820190508181036000830152613d2081856139c5565b9050613d2f602083018461362d565b9392505050565b6000604082019050613d4b600083018561362d565b613d58602083018461362d565b9392505050565b6000613d6a82613331565b9150613d7583613331565b9250828201905080821115613d8d57613d8c613c5c565b5b92915050565b6000606082019050613da8600083018661362d565b613db5602083018561362d565b613dc26040830184613603565b949350505050565b613dd3816138c3565b82525050565b6000608082019050613dee6000830187613603565b613dfb602083018661362d565b613e086040830185613603565b613e156060830184613dca565b95945050505050565b6000608082019050613e336000830187613603565b613e4060208301866136fd565b613e4d60408301856136fd565b613e5a606083018461362d565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613ebf602683613a45565b9150613eca82613e63565b604082019050919050565b60006020820190508181036000830152613eee81613eb2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f2b602083613a45565b9150613f3682613ef5565b602082019050919050565b60006020820190508181036000830152613f5a81613f1e565b9050919050565b6000613f6c82613331565b9150613f7783613331565b9250828202613f8581613331565b91508282048414831517613f9c57613f9b613c5c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613fdd82613331565b9150613fe883613331565b925082613ff857613ff7613fa3565b5b828204905092915050565b600061400e82613331565b915061401983613331565b925082820390508181111561403157614030613c5c565b5b92915050565b600069ffffffffffffffffffff82169050919050565b61405681614037565b811461406157600080fd5b50565b6000815190506140738161404d565b92915050565b614082816136f3565b811461408d57600080fd5b50565b60008151905061409f81614079565b92915050565b600080600080600060a086880312156140c1576140c0613327565b5b60006140cf88828901614064565b95505060206140e088828901614090565b94505060406140f188828901613ac2565b935050606061410288828901613ac2565b925050608061411388828901614064565b915050929550929590935056fea2646970667358221220781d64250528acfb83a496ef647b5ec68aaf182165fba282aa780ed8193b04ea64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80638da5cb5b116100a0578063d1d9ff8511610064578063d1d9ff85146103f0578063d408036014610419578063de8d2c8e14610456578063df791e5014610460578063f2fde38b146104895761012a565b80638da5cb5b146102f7578063968c6313146103225780639a84a86f1461035f578063a8269acd14610388578063b002249d146103c55761012a565b806353dd6d0d116100e757806353dd6d0d146102215780635fea61201461025e578063681a1a16146102875780636b638d7f146102a3578063715018a6146102e05761012a565b806305fe138b1461012c5780630e89a3ce1461015557806327e28b891461017e5780633464f284146101bb5780634ae05c7d146101f85761012a565b3661012a57005b005b34801561013857600080fd5b50610153600480360381019061014e91906133c5565b6104b2565b005b34801561016157600080fd5b5061017c6004803603810190610177919061355e565b610a71565b005b34801561018a57600080fd5b506101a560048036038101906101a091906135d6565b610be2565b6040516101b29190613612565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd91906135d6565b610d1f565b6040516101ef919061363c565b60405180910390f35b34801561020457600080fd5b5061021f600480360381019061021a9190613657565b610d88565b005b34801561022d57600080fd5b50610248600480360381019061024391906136a0565b610e76565b604051610255919061370c565b60405180910390f35b34801561026a57600080fd5b5061028560048036038101906102809190613727565b6110e1565b005b6102a1600480360381019061029c9190613767565b6115bc565b005b3480156102af57600080fd5b506102ca60048036038101906102c591906135d6565b611a38565b6040516102d79190613865565b60405180910390f35b3480156102ec57600080fd5b506102f5611acf565b005b34801561030357600080fd5b5061030c611ae3565b604051610319919061363c565b60405180910390f35b34801561032e57600080fd5b50610349600480360381019061034491906136a0565b611b0c565b604051610356919061370c565b60405180910390f35b34801561036b57600080fd5b50610386600480360381019061038191906136a0565b611c97565b005b34801561039457600080fd5b506103af60048036038101906103aa9190613887565b61216f565b6040516103bc9190613959565b60405180910390f35b3480156103d157600080fd5b506103da6122c3565b6040516103e79190613a23565b60405180910390f35b3480156103fc57600080fd5b5061041760048036038101906104129190613657565b612351565b005b34801561042557600080fd5b50610440600480360381019061043b9190613887565b61243f565b60405161044d919061363c565b60405180910390f35b61045e61247e565b005b34801561046c57600080fd5b50610487600480360381019061048291906136a0565b612822565b005b34801561049557600080fd5b506104b060048036038101906104ab91906135d6565b612e0b565b005b6002600354036104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee90613aa2565b60405180910390fd5b600260038190555061050881612e8e565b61054957806040517f7797ffbe000000000000000000000000000000000000000000000000000000008152600401610540919061363c565b60405180910390fd5b6105536004612fa3565b821061058b576040517f04f490d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560008481526020019081526020016000209050600015158160040160149054906101000a900460ff161515036105f1576040517ffb2d2bb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461068557336040517f56b9e3ae00000000000000000000000000000000000000000000000000000000815260040161067c919061363c565b60405180910390fd5b42816003015411156106d25780600301546040517f98fb43820000000000000000000000000000000000000000000000000000000081526004016106c99190613612565b60405180910390fd5b600081600101549050600061070c8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168584610e76565b9050808473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610748919061363c565b602060405180830381865afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190613ad7565b10156107cc57806040517fb8c67e600000000000000000000000000000000000000000000000000000000081526004016107c3919061370c565b60405180910390fd5b60006107dc828560020154612fb1565b905060006107f3828461303390919063ffffffff16565b905060008560040160146101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361099f5760007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b81526004016108c39190613612565b600060405180830381600087803b1580156108dd57600080fd5b505af11580156108f1573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff168360405161091b90613b35565b60006040518083038185875af1925050503d8060008114610958576040519150601f19603f3d011682016040523d82523d6000602084013e61095d565b606091505b5050905080610998576040517fd7227dda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050610a1f565b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109da929190613b4a565b6020604051808303816000875af11580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190613b9f565b505b7f214bcf04e4c723a07e54c933e5e0cee347609545851dabc49534923ab040725287848385338b604051610a5896959493929190613bcc565b60405180910390a1505050505060016003819055505050565b610a79613049565b805182511180610a8a575080518251105b15610ac1576040517f089b91de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518160ff161015610b9b57818160ff1681518110610ae657610ae5613c2d565b5b602002602001015160026000858460ff1681518110610b0857610b07613c2d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610b9390613c98565b915050610ac4565b507fb6a3ef7cf10656c235edee3c98898ae8a752c47fc3d8e0c6da716bc6607824988282610bc76130c7565b604051610bd693929190613cc1565b60405180910390a15050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c5457816040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401610c4b919061363c565b60405180910390fd5b610c5d82612e8e565b610c9e57816040517f7797ffbe000000000000000000000000000000000000000000000000000000008152600401610c95919061363c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610cd7919061363c565b602060405180830381865afa158015610cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d189190613ad7565b9050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610d90613049565b60005b81518160ff161015610e32576001828260ff1681518110610db757610db6613c2d565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610e2a90613c98565b915050610d93565b507fd6fa28150464027527af46de4f6e4a0c63fdfb5579954631baa13ba43d08fcb681610e5d6130c7565b604051610e6b929190613d06565b60405180910390a150565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610ede5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15610f215760006040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401610f18919061363c565b60405180910390fd5b60008211610f685733826040517f188ea6a1000000000000000000000000000000000000000000000000000000008152600401610f5f929190613b4a565b60405180910390fd5b610f7184612e8e565b1580610f835750610f8183612e8e565b155b15610fc75783836040517fccb4b98a000000000000000000000000000000000000000000000000000000008152600401610fbe929190613d36565b60405180910390fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600061109a836130cf565b905060006110a7836130cf565b905060006110d0826110c289866130e690919063ffffffff16565b6130fc90919063ffffffff16565b905080955050505050509392505050565b600260035403611126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111d90613aa2565b60405180910390fd5b6002600381905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361119f57816040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401611196919061363c565b60405180910390fd5b600081116111e65733816040517f452913260000000000000000000000000000000000000000000000000000000081526004016111dd929190613b4a565b60405180910390fd5b6111ef82612e8e565b61123057816040517f7797ffbe000000000000000000000000000000000000000000000000000000008152600401611227919061363c565b60405180910390fd5b808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161126a919061363c565b602060405180830381865afa158015611287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ab9190613ad7565b10156112f05733826040517f2250391f0000000000000000000000000000000000000000000000000000000081526004016112e7929190613d36565b60405180910390fd5b60006040518060c001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200142815260200162093a80426113349190613d5f565b81526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600115158152509050806005600061136d6004612fa3565b815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555090505060006114566004612fa3565b9050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556114c86004613112565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161150593929190613d93565b6020604051808303816000875af1158015611524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115489190613b9f565b50428473ffffffffffffffffffffffffffffffffffffffff16827f36fada1fbbd5061ae87da160ee9cf9148d23771d156cdcd0d509004665580992863362093a80426115949190613d5f565b60016040516115a69493929190613dd9565b60405180910390a4505060016003819055505050565b600260035403611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f890613aa2565b60405180910390fd5b6002600381905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806116705750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b156116b35760006040517ff013c1c70000000000000000000000000000000000000000000000000000000081526004016116aa919061363c565b60405180910390fd5b600034116116fa5733346040517f188ea6a10000000000000000000000000000000000000000000000000000000081526004016116f1929190613b4a565b60405180910390fd5b61170381612e8e565b61174457806040517f7797ffbe00000000000000000000000000000000000000000000000000000000815260040161173b919061363c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146117c9576040517fd4f017e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006117f67f00000000000000000000000000000000000000000000000000000000000000008334610e76565b9050808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611832919061363c565b602060405180830381865afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118739190613ad7565b10156118b657806040517fb8c67e600000000000000000000000000000000000000000000000000000000081526004016118ad919061370c565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561192357600080fd5b505af1158015611937573d6000803e3d6000fd5b5050505050600061194783613128565b90508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33611979848761315e90919063ffffffff16565b6040518363ffffffff1660e01b8152600401611996929190613b4a565b6020604051808303816000875af11580156119b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d99190613b9f565b507f5ea8759b68627ec29b178c065e52f9aa44e80fa7a9826379f0b00d0c4737aeb134611a0f838661315e90919063ffffffff16565b8333604051611a219493929190613e1e565b60405180910390a150505060016003819055505050565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611ac357602002820191906000526020600020905b815481526020019060010190808311611aaf575b50505050509050919050565b611ad7613049565b611ae16000613174565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611b745750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15611bb75760006040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401611bae919061363c565b60405180910390fd5b60008211611bfe5733826040517f188ea6a1000000000000000000000000000000000000000000000000000000008152600401611bf5929190613b4a565b60405180910390fd5b611c0784612e8e565b1580611c195750611c1783612e8e565b155b15611c5d5783836040517fccb4b98a000000000000000000000000000000000000000000000000000000008152600401611c54929190613d36565b60405180910390fd5b6000611c6a858585610e76565b90506000611c7782613128565b9050611c8c818361315e90919063ffffffff16565b925050509392505050565b600260035403611cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd390613aa2565b60405180910390fd5b6002600381905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611d4b5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611d8e5760006040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401611d85919061363c565b60405180910390fd5b60008111611dd55733816040517f188ea6a1000000000000000000000000000000000000000000000000000000008152600401611dcc929190613b4a565b60405180910390fd5b611dde83612e8e565b8015611e3557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612162576000611e67847f000000000000000000000000000000000000000000000000000000000000000084610e76565b9050807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ec3919061363c565b602060405180830381865afa158015611ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f049190613ad7565b1015611f4757806040517fb8c67e60000000000000000000000000000000000000000000000000000000008152600401611f3e919061370c565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000090506000611f7783613128565b90506000611f8e828561315e90919063ffffffff16565b90508673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401611fcd93929190613d93565b6020604051808303816000875af1158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190613b9f565b508273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161204a9190613612565b600060405180830381600087803b15801561206457600080fd5b505af1158015612078573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff16826040516120a290613b35565b60006040518083038185875af1925050503d80600081146120df576040519150601f19603f3d011682016040523d82523d6000602084013e6120e4565b606091505b505090508061211f576040517fd7227dda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fc4ba93cc2a4369d092310672c450b170682626c0db2883bb58653fabf746781f868385336040516121549493929190613e1e565b60405180910390a150505050505b6001600381905550505050565b6121776132b9565b6121816004612fa3565b82106121b9576040517f04f490d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff1615151515815250509050919050565b6060600180548060200260200160405190810160405280929190818152602001828054801561234757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116122fd575b5050505050905090565b612359613049565b60005b81518160ff1610156123fb576001828260ff16815181106123805761237f613c2d565b5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806123f390613c98565b91505061235c565b507f0f92e01580a0fc1a528e75e070f2ab1b2622d8f422c90e7f878e75530b34c952816124266130c7565b604051612434929190613d06565b60405180910390a150565b6001818154811061244f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600354036124c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ba90613aa2565b60405180910390fd5b6002600381905550600034116125125733346040517f45291326000000000000000000000000000000000000000000000000000000008152600401612509929190613b4a565b60405180910390fd5b60006040518060c001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815260200134815260200142815260200162093a80426125769190613d5f565b81526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160011515815250905080600560006125af6004612fa3565b815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555090505060006126986004612fa3565b9050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505561270a6004613112565b60007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561277757600080fd5b505af115801561278b573d6000803e3d6000fd5b5050505050427f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16837f36fada1fbbd5061ae87da160ee9cf9148d23771d156cdcd0d509004665580992343362093a80426127fb9190613d5f565b600160405161280d9493929190613dd9565b60405180910390a45050506001600381905550565b600260035403612867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285e90613aa2565b60405180910390fd5b60026003819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061291457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561294b576040517fd4f017e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036129bd5782826040517f048fdf110000000000000000000000000000000000000000000000000000000081526004016129b4929190613d36565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612a245750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612a675760006040517ff013c1c7000000000000000000000000000000000000000000000000000000008152600401612a5e919061363c565b60405180910390fd5b60008111612aae5733816040517f188ea6a1000000000000000000000000000000000000000000000000000000008152600401612aa5929190613b4a565b60405180910390fd5b612ab783612e8e565b1580612ac95750612ac782612e8e565b155b15612b0d5782826040517fccb4b98a000000000000000000000000000000000000000000000000000000008152600401612b04929190613d36565b60405180910390fd5b808373ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401612b47919061363c565b602060405180830381865afa158015612b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b889190613ad7565b1015612bcd5733836040517f2250391f000000000000000000000000000000000000000000000000000000008152600401612bc4929190613d36565b60405180910390fd5b6000612bda848484610e76565b9050808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612c16919061363c565b602060405180830381865afa158015612c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c579190613ad7565b1015612c9a57806040517fb8c67e60000000000000000000000000000000000000000000000000000000008152600401612c91919061370c565b60405180910390fd5b6000612ca582613128565b90506000612cbc828461315e90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401612cfb93929190613d93565b6020604051808303816000875af1158015612d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3e9190613b9f565b508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612d7a929190613b4a565b6020604051808303816000875af1158015612d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbd9190613b9f565b507f18764c8d0c0e69b6413adcc413385be0c1b905839a173088010b8fb399ff809084828433604051612df39493929190613e1e565b60405180910390a15050506001600381905550505050565b612e13613049565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7990613ed5565b60405180910390fd5b612e8b81613174565b50565b6000806001805480602002602001604051908101604052809291908181526020018280548015612f1357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612ec9575b5050505050905060005b81518160ff161015612f9757818160ff1681518110612f3f57612f3e613c2d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612f8457600192505050612f9e565b8080612f8f90613c98565b915050612f1d565b5060009150505b919050565b600081600001549050919050565b6000806301e1338090506000612fd0844261315e90919063ffffffff16565b90506000612fe8600a876130e690919063ffffffff16565b9050600061302460646130168661300886886130e690919063ffffffff16565b6130fc90919063ffffffff16565b6130fc90919063ffffffff16565b90508094505050505092915050565b600081836130419190613d5f565b905092915050565b6130516130c7565b73ffffffffffffffffffffffffffffffffffffffff1661306f611ae3565b73ffffffffffffffffffffffffffffffffffffffff16146130c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130bc90613f41565b60405180910390fd5b565b600033905090565b6000806130db83613238565b905080915050919050565b600081836130f49190613f61565b905092915050565b6000818361310a9190613fd2565b905092915050565b6001816000016000828254019250508190555050565b600080613153612710613145601e866130e690919063ffffffff16565b6130fc90919063ffffffff16565b905080915050919050565b6000818361316c9190614003565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015613286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132aa91906140a5565b50505091505080915050919050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61334481613331565b811461334f57600080fd5b50565b6000813590506133618161333b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061339282613367565b9050919050565b6133a281613387565b81146133ad57600080fd5b50565b6000813590506133bf81613399565b92915050565b600080604083850312156133dc576133db613327565b5b60006133ea85828601613352565b92505060206133fb858286016133b0565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134538261340a565b810181811067ffffffffffffffff821117156134725761347161341b565b5b80604052505050565b600061348561331d565b9050613491828261344a565b919050565b600067ffffffffffffffff8211156134b1576134b061341b565b5b602082029050602081019050919050565b600080fd5b60006134da6134d584613496565b61347b565b905080838252602082019050602084028301858111156134fd576134fc6134c2565b5b835b81811015613526578061351288826133b0565b8452602084019350506020810190506134ff565b5050509392505050565b600082601f83011261354557613544613405565b5b81356135558482602086016134c7565b91505092915050565b6000806040838503121561357557613574613327565b5b600083013567ffffffffffffffff8111156135935761359261332c565b5b61359f85828601613530565b925050602083013567ffffffffffffffff8111156135c0576135bf61332c565b5b6135cc85828601613530565b9150509250929050565b6000602082840312156135ec576135eb613327565b5b60006135fa848285016133b0565b91505092915050565b61360c81613331565b82525050565b60006020820190506136276000830184613603565b92915050565b61363681613387565b82525050565b6000602082019050613651600083018461362d565b92915050565b60006020828403121561366d5761366c613327565b5b600082013567ffffffffffffffff81111561368b5761368a61332c565b5b61369784828501613530565b91505092915050565b6000806000606084860312156136b9576136b8613327565b5b60006136c7868287016133b0565b93505060206136d8868287016133b0565b92505060406136e986828701613352565b9150509250925092565b6000819050919050565b613706816136f3565b82525050565b600060208201905061372160008301846136fd565b92915050565b6000806040838503121561373e5761373d613327565b5b600061374c858286016133b0565b925050602061375d85828601613352565b9150509250929050565b6000806040838503121561377e5761377d613327565b5b600061378c858286016133b0565b925050602061379d858286016133b0565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6137dc81613331565b82525050565b60006137ee83836137d3565b60208301905092915050565b6000602082019050919050565b6000613812826137a7565b61381c81856137b2565b9350613827836137c3565b8060005b8381101561385857815161383f88826137e2565b975061384a836137fa565b92505060018101905061382b565b5085935050505092915050565b6000602082019050818103600083015261387f8184613807565b905092915050565b60006020828403121561389d5761389c613327565b5b60006138ab84828501613352565b91505092915050565b6138bd81613387565b82525050565b60008115159050919050565b6138d8816138c3565b82525050565b60c0820160008201516138f460008501826138b4565b50602082015161390760208501826137d3565b50604082015161391a60408501826137d3565b50606082015161392d60608501826137d3565b50608082015161394060808501826138b4565b5060a082015161395360a08501826138cf565b50505050565b600060c08201905061396e60008301846138de565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006139ac83836138b4565b60208301905092915050565b6000602082019050919050565b60006139d082613974565b6139da818561397f565b93506139e583613990565b8060005b83811015613a165781516139fd88826139a0565b9750613a08836139b8565b9250506001810190506139e9565b5085935050505092915050565b60006020820190508181036000830152613a3d81846139c5565b905092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613a8c601f83613a45565b9150613a9782613a56565b602082019050919050565b60006020820190508181036000830152613abb81613a7f565b9050919050565b600081519050613ad18161333b565b92915050565b600060208284031215613aed57613aec613327565b5b6000613afb84828501613ac2565b91505092915050565b600081905092915050565b50565b6000613b1f600083613b04565b9150613b2a82613b0f565b600082019050919050565b6000613b4082613b12565b9150819050919050565b6000604082019050613b5f600083018561362d565b613b6c6020830184613603565b9392505050565b613b7c816138c3565b8114613b8757600080fd5b50565b600081519050613b9981613b73565b92915050565b600060208284031215613bb557613bb4613327565b5b6000613bc384828501613b8a565b91505092915050565b600060c082019050613be16000830189613603565b613bee6020830188613603565b613bfb6040830187613603565b613c086060830186613603565b613c15608083018561362d565b613c2260a083018461362d565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b6000613ca382613c8b565b915060ff8203613cb657613cb5613c5c565b5b600182019050919050565b60006060820190508181036000830152613cdb81866139c5565b90508181036020830152613cef81856139c5565b9050613cfe604083018461362d565b949350505050565b60006040820190508181036000830152613d2081856139c5565b9050613d2f602083018461362d565b9392505050565b6000604082019050613d4b600083018561362d565b613d58602083018461362d565b9392505050565b6000613d6a82613331565b9150613d7583613331565b9250828201905080821115613d8d57613d8c613c5c565b5b92915050565b6000606082019050613da8600083018661362d565b613db5602083018561362d565b613dc26040830184613603565b949350505050565b613dd3816138c3565b82525050565b6000608082019050613dee6000830187613603565b613dfb602083018661362d565b613e086040830185613603565b613e156060830184613dca565b95945050505050565b6000608082019050613e336000830187613603565b613e4060208301866136fd565b613e4d60408301856136fd565b613e5a606083018461362d565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613ebf602683613a45565b9150613eca82613e63565b604082019050919050565b60006020820190508181036000830152613eee81613eb2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f2b602083613a45565b9150613f3682613ef5565b602082019050919050565b60006020820190508181036000830152613f5a81613f1e565b9050919050565b6000613f6c82613331565b9150613f7783613331565b9250828202613f8581613331565b91508282048414831517613f9c57613f9b613c5c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613fdd82613331565b9150613fe883613331565b925082613ff857613ff7613fa3565b5b828204905092915050565b600061400e82613331565b915061401983613331565b925082820390508181111561403157614030613c5c565b5b92915050565b600069ffffffffffffffffffff82169050919050565b61405681614037565b811461406157600080fd5b50565b6000815190506140738161404d565b92915050565b614082816136f3565b811461408d57600080fd5b50565b60008151905061409f81614079565b92915050565b600080600080600060a086880312156140c1576140c0613327565b5b60006140cf88828901614064565b95505060206140e088828901614090565b94505060406140f188828901613ac2565b935050606061410288828901613ac2565b925050608061411388828901614064565b915050929550929590935056fea2646970667358221220781d64250528acfb83a496ef647b5ec68aaf182165fba282aa780ed8193b04ea64736f6c63430008110033",
  "devdoc": {
    "author": "Aamir usmani. github username: Aamirusmani1552",
    "details": "since solidity doesn't support fractional value, the contract formula's has been modified accordingly.",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A Decenteralized exchange for swapping tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is just a for learning purpose. Please don't use it to deploy on mainnet. it might lead to loss of funds.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/DEX.sol:DEX",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3032,
        "contract": "contracts/DEX.sol:DEX",
        "label": "s_validTokenAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2876,
        "contract": "contracts/DEX.sol:DEX",
        "label": "s_tokenUsdPricesV3contracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 169,
        "contract": "contracts/DEX.sol:DEX",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1385,
        "contract": "contracts/DEX.sol:DEX",
        "label": "s_counter",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)915_storage"
      },
      {
        "astId": 1406,
        "contract": "contracts/DEX.sol:DEX",
        "label": "s_liquidityPool",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(pool)1401_storage)"
      },
      {
        "astId": 1411,
        "contract": "contracts/DEX.sol:DEX",
        "label": "s_poolContributions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(pool)1401_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DEX.pool)",
        "numberOfBytes": "32",
        "value": "t_struct(pool)1401_storage"
      },
      "t_struct(Counter)915_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 914,
            "contract": "contracts/DEX.sol:DEX",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(pool)1401_storage": {
        "encoding": "inplace",
        "label": "struct DEX.pool",
        "members": [
          {
            "astId": 1390,
            "contract": "contracts/DEX.sol:DEX",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1392,
            "contract": "contracts/DEX.sol:DEX",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1394,
            "contract": "contracts/DEX.sol:DEX",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1396,
            "contract": "contracts/DEX.sol:DEX",
            "label": "minLockPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1398,
            "contract": "contracts/DEX.sol:DEX",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1400,
            "contract": "contracts/DEX.sol:DEX",
            "label": "active",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}